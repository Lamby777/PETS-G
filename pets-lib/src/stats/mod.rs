//!
//! This module is for character/enemy stat type definitions
//!

use crate::prelude::*;

// stat-related submodules
pub mod autoload;
pub mod battler;
pub mod charmap;
pub mod pchars;
pub mod savefiles;
pub mod statcalc;

// re-export some crap from ^^^
pub use autoload::StatsInterface;
pub use battler::Battler;
pub use savefiles::SaveFile;
pub use statcalc::{CharStatCalcs, StatCalcFn, StatCalcList};

// type aliases
pub type CharMap = HashMap<String, RefCell<CharData>>;
pub type IntegralStat = i16;
pub type FloatStat = f32;

/// All the information the game needs to know about a character
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct CharData {
    /// Name of the character, as picked by the user
    /// ⚠️⚠️⚠️ See <https://github.com/Lamby777/PETS-G/issues/23>
    pub display_name: String,

    pub level: IntegralStat,
    pub stats: CharStatsStateful,
    pub inherent_stats: InherentStats,
    pub buffs: Vec<InherentStats>,

    /// Status effects the character has
    pub status_effects: HashSet<StatusEffect>,

    /// Items this character is holding
    pub inventory: Vec<Item>,

    /// Equipment this character is wearing/using
    ///
    /// # Important
    ///
    /// Equipping an item REMOVES it from the inventory!
    ///
    /// Not only does that make it easier to code, but it
    /// also prevents feeling that your inventory space is
    /// being "wasted" by equipment.
    pub equipment: Vec<Item>,
}

impl Battler for CharData {
    fn hp_mut(&mut self) -> &mut IntegralStat {
        &mut self.stats.hp
    }

    fn status_effects(&self) -> &HashSet<StatusEffect> {
        &self.status_effects
    }

    fn status_effects_mut(&mut self) -> &mut HashSet<StatusEffect> {
        &mut self.status_effects
    }

    fn inherent_stats(&self) -> &InherentStats {
        &self.inherent_stats
    }

    fn buffs_list(&self) -> &[InherentStats] {
        &self.buffs
    }
}

#[derive(Clone, Debug, Default, Serialize, Deserialize)]
pub struct CharStatsStateful {
    /// Current HP
    pub hp: IntegralStat,

    /// Current energy level
    pub energy: IntegralStat,
    // mana starts at 0 each battle
}

/// Stats that are inherent to a character or enemy type.
///
/// This doesn't mean they never change; they do every
/// time you level up or use certain items...
///
/// It just means "inherent" as in it doesn't constantly
/// change like HP, mana, or energy.
#[derive(Clone, Debug, Default, Serialize, Deserialize)]
pub struct InherentStats {
    pub max_hp: IntegralStat,
    pub max_energy: IntegralStat,

    pub attack: IntegralStat,
    pub defense: IntegralStat,
    pub speed: IntegralStat,
    pub stability: IntegralStat, // PK defense

    // refer to google doc for what these do...
    // can't pick a good name for em yet
    pub delta: IntegralStat,   // "the crit one"
    pub epsilon: IntegralStat, // "the combo one"

    // Exclusive to certain characters
    // Spoiler alert: Ethan is not the only one who needs lambda... :>
    pub lambda: Option<IntegralStat>,
    pub max_mana: Option<IntegralStat>,
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum StatusEffect {
    Sleeping,    // Can't move, but recover 20% energy on wakeup
    Paralyzed,   // ^^^ No movement, no energy recovery, but still has PK. Almost no combos
    Crying,      // Oops, all your attacks missed! Sowwy :<
    LightHeaded, // Like uncontrollable crying + also affects PK, but lower miss rate overall

    ShortBreath, // No attacks, painfully slow movement
    Dizzy,       // "Disoriented", auditory flashbang + harder combos
    Blinded,     // Battle board turns black

    Burning,   // Damage over time
    Frostbite, // More damage, introduced later in the game
    Bleeding,  // ^^^ HP meter biased towards rolling down faster
    Poison,    // ^^^ no PK
    PoisonR,   // ^^^ no PK, completely unable to fight (basically dead)

    Tired, // Less lenient music timing. Get some rest, dumbass! Don't emulate my bad habits.
}

impl Display for StatusEffect {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use StatusEffect::*;

        let s = match self {
            LightHeaded => "Light-headed",
            ShortBreath => "Short of breath",
            Burning => "On Fire",
            PoisonR => "Poisoned (R)",
            _ => return Debug::fmt(&self, f),
        };

        write!(f, "{}", s)
    }
}

// WARNING: The stuff below is mostly just boilerplate garbage generated by copilot.

impl Default for CharData {
    fn default() -> Self {
        CharData {
            display_name: "Chicken Nugget".to_owned(),
            level: 1,

            // i seriously can't `..Default::default()` because
            // that would be infinite recursion... WTF?
            stats: Default::default(),
            inherent_stats: Default::default(),
            status_effects: Default::default(),
            inventory: Default::default(),
            equipment: Default::default(),
            buffs: Default::default(),
        }
    }
}

impl std::ops::Add for InherentStats {
    type Output = Self;

    fn add(self, rhs: Self) -> Self {
        InherentStats {
            max_hp: self.max_hp + rhs.max_hp,
            max_energy: self.max_energy + rhs.max_energy,
            attack: self.attack + rhs.attack,
            defense: self.defense + rhs.defense,
            speed: self.speed + rhs.speed,
            stability: self.stability + rhs.stability,
            delta: self.delta + rhs.delta,
            epsilon: self.epsilon + rhs.epsilon,

            lambda: self.lambda.zip(rhs.lambda).map(|(a, b)| a + b),
            max_mana: self.max_mana.zip(rhs.max_mana).map(|(a, b)| a + b),
        }
    }
}

impl std::ops::Sub for InherentStats {
    type Output = Self;

    fn sub(self, rhs: Self) -> Self {
        InherentStats {
            max_hp: self.max_hp - rhs.max_hp,
            max_energy: self.max_energy - rhs.max_energy,
            attack: self.attack - rhs.attack,
            defense: self.defense - rhs.defense,
            speed: self.speed - rhs.speed,
            stability: self.stability - rhs.stability,
            delta: self.delta - rhs.delta,
            epsilon: self.epsilon - rhs.epsilon,

            lambda: self.lambda.zip(rhs.lambda).map(|(a, b)| a - b),
            max_mana: self.max_mana.zip(rhs.max_mana).map(|(a, b)| a - b),
        }
    }
}
